{"format": "torch", "nodes": [{"name": "preBlockGroups.0", "id": 12110599120, "class_name": "Conv2d(weights shape = torch.Size([64, 3, 7, 7]) stride = (2, 2) padding = (3, 3) )", "parameters": [["weight", [64, 3, 7, 7]]], "output_shape": [[128, 64, 16, 16]], "num_parameters": [9408]}, {"name": "preBlockGroups.1", "id": 12112522976, "class_name": "BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)", "parameters": [["weight", [64]], ["bias", [64]]], "output_shape": [[128, 64, 16, 16]], "num_parameters": [64, 64]}, {"name": "preBlockGroups.2", "id": 12112819536, "class_name": "ReLU()", "parameters": [], "output_shape": [[128, 64, 16, 16]], "num_parameters": []}, {"name": "preBlockGroups.3", "id": 12112819584, "class_name": "MaxPool2d(kernel_size = (3, 3) stride = (2, 2) padding = (1, 1))", "parameters": [], "output_shape": [[128, 64, 8, 8]], "num_parameters": []}, {"name": "layers.0", "id": 12110599504, "class_name": "BlockGroup(\n  (firstRes): ResidualBlock(\n    (left): Sequential(\n      (0): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n      (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n      (2): ReLU()\n      (3): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n      (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n    )\n    (right): Sequential(\n      (0): Identity()\n    )\n    (relu): ReLU()\n  )\n  (otherRes): ModuleList(\n    (0): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([64, 64, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n  )\n)", "parameters": [["firstRes.left.0.weight", [64, 64, 3, 3]], ["firstRes.left.1.weight", [64]], ["firstRes.left.1.bias", [64]], ["firstRes.left.3.weight", [64, 64, 3, 3]], ["firstRes.left.4.weight", [64]], ["firstRes.left.4.bias", [64]], ["otherRes.0.left.0.weight", [64, 64, 3, 3]], ["otherRes.0.left.1.weight", [64]], ["otherRes.0.left.1.bias", [64]], ["otherRes.0.left.3.weight", [64, 64, 3, 3]], ["otherRes.0.left.4.weight", [64]], ["otherRes.0.left.4.bias", [64]], ["otherRes.1.left.0.weight", [64, 64, 3, 3]], ["otherRes.1.left.1.weight", [64]], ["otherRes.1.left.1.bias", [64]], ["otherRes.1.left.3.weight", [64, 64, 3, 3]], ["otherRes.1.left.4.weight", [64]], ["otherRes.1.left.4.bias", [64]]], "output_shape": [[128, 64, 8, 8]], "num_parameters": [36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64]}, {"name": "layers.1", "id": 6417758048, "class_name": "BlockGroup(\n  (firstRes): ResidualBlock(\n    (left): Sequential(\n      (0): Conv2d(weights shape = torch.Size([128, 64, 3, 3]) stride = (2, 2) padding = (1, 1) )\n      (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n      (2): ReLU()\n      (3): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n      (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n    )\n    (right): Sequential(\n      (0): Conv2d(weights shape = torch.Size([128, 64, 1, 1]) stride = (2, 2) padding = (0, 0) )\n      (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n    )\n    (relu): ReLU()\n  )\n  (otherRes): ModuleList(\n    (0): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (2): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([128, 128, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n  )\n)", "parameters": [["firstRes.left.0.weight", [128, 64, 3, 3]], ["firstRes.left.1.weight", [128]], ["firstRes.left.1.bias", [128]], ["firstRes.left.3.weight", [128, 128, 3, 3]], ["firstRes.left.4.weight", [128]], ["firstRes.left.4.bias", [128]], ["firstRes.right.0.weight", [128, 64, 1, 1]], ["firstRes.right.1.weight", [128]], ["firstRes.right.1.bias", [128]], ["otherRes.0.left.0.weight", [128, 128, 3, 3]], ["otherRes.0.left.1.weight", [128]], ["otherRes.0.left.1.bias", [128]], ["otherRes.0.left.3.weight", [128, 128, 3, 3]], ["otherRes.0.left.4.weight", [128]], ["otherRes.0.left.4.bias", [128]], ["otherRes.1.left.0.weight", [128, 128, 3, 3]], ["otherRes.1.left.1.weight", [128]], ["otherRes.1.left.1.bias", [128]], ["otherRes.1.left.3.weight", [128, 128, 3, 3]], ["otherRes.1.left.4.weight", [128]], ["otherRes.1.left.4.bias", [128]], ["otherRes.2.left.0.weight", [128, 128, 3, 3]], ["otherRes.2.left.1.weight", [128]], ["otherRes.2.left.1.bias", [128]], ["otherRes.2.left.3.weight", [128, 128, 3, 3]], ["otherRes.2.left.4.weight", [128]], ["otherRes.2.left.4.bias", [128]]], "output_shape": [[128, 128, 4, 4]], "num_parameters": [73728, 128, 128, 147456, 128, 128, 8192, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128]}, {"name": "layers.2", "id": 12110598448, "class_name": "BlockGroup(\n  (firstRes): ResidualBlock(\n    (left): Sequential(\n      (0): Conv2d(weights shape = torch.Size([256, 128, 3, 3]) stride = (2, 2) padding = (1, 1) )\n      (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      (2): ReLU()\n      (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n      (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n    )\n    (right): Sequential(\n      (0): Conv2d(weights shape = torch.Size([256, 128, 1, 1]) stride = (2, 2) padding = (0, 0) )\n      (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n    )\n    (relu): ReLU()\n  )\n  (otherRes): ModuleList(\n    (0): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (2): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (3): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (4): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([256, 256, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n  )\n)", "parameters": [["firstRes.left.0.weight", [256, 128, 3, 3]], ["firstRes.left.1.weight", [256]], ["firstRes.left.1.bias", [256]], ["firstRes.left.3.weight", [256, 256, 3, 3]], ["firstRes.left.4.weight", [256]], ["firstRes.left.4.bias", [256]], ["firstRes.right.0.weight", [256, 128, 1, 1]], ["firstRes.right.1.weight", [256]], ["firstRes.right.1.bias", [256]], ["otherRes.0.left.0.weight", [256, 256, 3, 3]], ["otherRes.0.left.1.weight", [256]], ["otherRes.0.left.1.bias", [256]], ["otherRes.0.left.3.weight", [256, 256, 3, 3]], ["otherRes.0.left.4.weight", [256]], ["otherRes.0.left.4.bias", [256]], ["otherRes.1.left.0.weight", [256, 256, 3, 3]], ["otherRes.1.left.1.weight", [256]], ["otherRes.1.left.1.bias", [256]], ["otherRes.1.left.3.weight", [256, 256, 3, 3]], ["otherRes.1.left.4.weight", [256]], ["otherRes.1.left.4.bias", [256]], ["otherRes.2.left.0.weight", [256, 256, 3, 3]], ["otherRes.2.left.1.weight", [256]], ["otherRes.2.left.1.bias", [256]], ["otherRes.2.left.3.weight", [256, 256, 3, 3]], ["otherRes.2.left.4.weight", [256]], ["otherRes.2.left.4.bias", [256]], ["otherRes.3.left.0.weight", [256, 256, 3, 3]], ["otherRes.3.left.1.weight", [256]], ["otherRes.3.left.1.bias", [256]], ["otherRes.3.left.3.weight", [256, 256, 3, 3]], ["otherRes.3.left.4.weight", [256]], ["otherRes.3.left.4.bias", [256]], ["otherRes.4.left.0.weight", [256, 256, 3, 3]], ["otherRes.4.left.1.weight", [256]], ["otherRes.4.left.1.bias", [256]], ["otherRes.4.left.3.weight", [256, 256, 3, 3]], ["otherRes.4.left.4.weight", [256]], ["otherRes.4.left.4.bias", [256]]], "output_shape": [[128, 256, 2, 2]], "num_parameters": [294912, 256, 256, 589824, 256, 256, 32768, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256]}, {"name": "layers.3", "id": 12112519952, "class_name": "BlockGroup(\n  (firstRes): ResidualBlock(\n    (left): Sequential(\n      (0): Conv2d(weights shape = torch.Size([512, 256, 3, 3]) stride = (2, 2) padding = (1, 1) )\n      (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n      (2): ReLU()\n      (3): Conv2d(weights shape = torch.Size([512, 512, 3, 3]) stride = (1, 1) padding = (1, 1) )\n      (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n    )\n    (right): Sequential(\n      (0): Conv2d(weights shape = torch.Size([512, 256, 1, 1]) stride = (2, 2) padding = (0, 0) )\n      (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n    )\n    (relu): ReLU()\n  )\n  (otherRes): ModuleList(\n    (0): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([512, 512, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([512, 512, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n    (1): ResidualBlock(\n      (left): Sequential(\n        (0): Conv2d(weights shape = torch.Size([512, 512, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        (2): ReLU()\n        (3): Conv2d(weights shape = torch.Size([512, 512, 3, 3]) stride = (1, 1) padding = (1, 1) )\n        (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n      )\n      (right): Sequential(\n        (0): Identity()\n      )\n      (relu): ReLU()\n    )\n  )\n)", "parameters": [["firstRes.left.0.weight", [512, 256, 3, 3]], ["firstRes.left.1.weight", [512]], ["firstRes.left.1.bias", [512]], ["firstRes.left.3.weight", [512, 512, 3, 3]], ["firstRes.left.4.weight", [512]], ["firstRes.left.4.bias", [512]], ["firstRes.right.0.weight", [512, 256, 1, 1]], ["firstRes.right.1.weight", [512]], ["firstRes.right.1.bias", [512]], ["otherRes.0.left.0.weight", [512, 512, 3, 3]], ["otherRes.0.left.1.weight", [512]], ["otherRes.0.left.1.bias", [512]], ["otherRes.0.left.3.weight", [512, 512, 3, 3]], ["otherRes.0.left.4.weight", [512]], ["otherRes.0.left.4.bias", [512]], ["otherRes.1.left.0.weight", [512, 512, 3, 3]], ["otherRes.1.left.1.weight", [512]], ["otherRes.1.left.1.bias", [512]], ["otherRes.1.left.3.weight", [512, 512, 3, 3]], ["otherRes.1.left.4.weight", [512]], ["otherRes.1.left.4.bias", [512]]], "output_shape": [[128, 512, 1, 1]], "num_parameters": [1179648, 512, 512, 2359296, 512, 512, 131072, 512, 512, 2359296, 512, 512, 2359296, 512, 512, 2359296, 512, 512, 2359296, 512, 512]}, {"name": "postBlockGroups.0", "id": 12112819728, "class_name": "AveragePool()", "parameters": [], "output_shape": [[128, 512]], "num_parameters": []}, {"name": "postBlockGroups.1", "id": 12112819776, "class_name": "Flatten(start_dim = 1 end_dim = -1)", "parameters": [], "output_shape": [[128, 512]], "num_parameters": []}, {"name": "postBlockGroups.2", "id": 12112819824, "class_name": "Linear(weight.shape = torch.Size([1000, 512]) bias.shape = torch.Size([1000]))", "parameters": [["weight", [1000, 512]], ["bias", [1000]]], "output_shape": [[128, 1000]], "num_parameters": [512000, 1000]}], "edges": []}